{"ast":null,"code":"import \"antd-mobile/lib/nav-bar/style/css\";\nimport _NavBar from \"antd-mobile/lib/nav-bar\";\nimport \"antd-mobile/lib/icon/style/css\";\nimport _Icon from \"antd-mobile/lib/icon\";\nvar _jsxFileName = \"F:\\\\\\u767E\\u5EA6\\u4E91\\u4E0B\\u8F7D\\\\React\\\\hkzf\\\\haokezufang\\\\src\\\\pages\\\\Map\\\\index.js\";\nimport React, { Component } from 'react';\nimport styles from './index.module.css';\nimport { getCurrCity } from '../../utils';\nimport { getMapHouses } from '../../utils/api/city';\nimport { getHouseByFilters } from '../../utils/api/house';\nimport HouseItem from '../../components/HouseItem';\nimport { BASE_URL } from '../../utils/axios';\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      list: [],\n      isShowList: false\n    };\n\n    this.getTypeAndZoom = () => {\n      let type, nextLevel; // 获取小区缩放级别\n\n      const currZoom = this.map.getZoom(); // 项目中默认缩放级别为：11\n\n      if (currZoom >= 10 && currZoom < 12) {\n        // 区\n        type = 'circle';\n        nextLevel = 13;\n      } else if (currZoom >= 12 && currZoom < 14) {\n        // 镇\n        type = 'circle';\n        nextLevel = 15;\n      } else if (currZoom >= 14 && currZoom < 16) {\n        // 小区\n        type = 'rect';\n      }\n\n      return {\n        type,\n        nextLevel\n      };\n    };\n\n    this.createOverlays = (type, item, nextLevel) => {\n      const {\n        coord: {\n          longitude,\n          latitude\n        },\n        label: areaName,\n        count,\n        value\n      } = item; // 转换地理位置坐标\n\n      const ipoint = new this.BMap.Point(longitude, latitude);\n\n      if (type === 'rect') {\n        this.createRect(ipoint, areaName, count, value);\n      } else {\n        this.createCircle(ipoint, areaName, count, value, nextLevel);\n      }\n    };\n\n    this.createRect = (ipoint, areaName, count, value) => {\n      // 绘制覆盖物\n      const opts = {\n        position: ipoint,\n        // 指定文本标注所在的地理位置\n        offset: new this.BMap.Size(-50, -28) //设置文本偏移量\n\n      };\n      const label = new this.BMap.Label(null, opts); // 创建文本标注对象\n\n      label.setContent(`\n      <div class=\"${styles.rect}\">\n        <span class=\"${styles.housename}\">${areaName}</span>\n        <span class=\"${styles.housenum}\">${count}</span>\n        <i class=\"${styles.arrow}\"></i>\n      </div>\n     `); // 去除默认样式\n\n      label.setStyle({\n        border: 'none'\n      }); // 添加点击事件\n\n      label.addEventListener('click', e => {\n        console.log('点击小区', value); // this.map.centerAndZoom(ipoint, 15)\n        // this.map.panTo(ipoint)\n\n        console.log(e);\n        this.moveToArea(e);\n        this.handlerHouseList(value);\n      });\n      this.map.addOverlay(label);\n    };\n\n    this.moveToArea = e => {\n      let {\n        clientX,\n        clientY\n      } = e.changedTouches[0];\n      console.log(window.innerWidth / 2, (window.innerHeight - 330) / 2, clientX, clientY);\n      const x = window.innerWidth / 2 - clientX,\n            y = (window.innerHeight - 330) / 2 - clientY;\n      console.log(x, y);\n      this.map.panBy(x, y);\n    };\n\n    this.handlerHouseList = async value => {\n      const {\n        status,\n        data: {\n          list\n        }\n      } = await getHouseByFilters(value);\n      status === 200 && this.setState({\n        list,\n        isShowList: true\n      });\n    };\n\n    this.createCircle = (ipoint, areaName, count, value, nextLevel) => {\n      // 绘制覆盖物\n      const opts = {\n        position: ipoint,\n        // 指定文本标注所在的地理位置\n        offset: new this.BMap.Size(0, 0) //设置文本偏移量\n\n      };\n      const label = new this.BMap.Label(null, opts); // 创建文本标注对象\n      // 给label添加唯一ID\n      // label.id = value;\n\n      label.setContent(`\n              <div class=\"${styles.bubble}\">\n              <p class=\"${styles.bubbleName}\">${areaName}</p>\n              <p>${count}</p>\n              </div>\n              `); // 去除默认样式\n\n      label.setStyle({\n        border: 'none'\n      }); // 添加点击事件\n\n      label.addEventListener('click', () => {\n        // 设置显示下一区域的位置和缩放级别\n        this.map.centerAndZoom(ipoint, nextLevel);\n        this.renderOverlays(value); // 清除第一层覆盖物\n        // map.clearOverlays();\n\n        setTimeout(() => this.map.clearOverlays());\n      });\n      this.map.addOverlay(label);\n    };\n\n    this.renderOverlays = async id => {\n      // Toast.loading('加载中...', 0);\n      // 初始化区覆盖物\n      let {\n        status,\n        data\n      } = await getMapHouses(id); // Toast.hide();\n      // =========获取覆盖物类型和下一层缩放级别========\n\n      const {\n        type,\n        nextLevel\n      } = this.getTypeAndZoom();\n\n      if (status === 200) {\n        data.forEach(item => {\n          this.createOverlays(type, item, nextLevel);\n        });\n      }\n    };\n\n    this.initMap = async () => {\n      // 挂载到实例上\n      this.BMap = window.BMap; // 创建地图实例 \n\n      this.map = new this.BMap.Map(\"container\"); // 获取定位城市\n\n      const {\n        value,\n        label\n      } = await getCurrCity(); // 创建地址解析器实例     \n\n      let myGeo = new this.BMap.Geocoder(); // 将地址解析结果显示在地图上，并调整地图视野    \n\n      myGeo.getPoint(null, async point => {\n        if (point) {\n          // 初始化地图，设置中心点坐标和地图级别  \n          this.map.centerAndZoom(point, 11); // 添加控件\n\n          this.map.addControl(new this.BMap.NavigationControl());\n          this.map.addControl(new this.BMap.ScaleControl()); // map.addOverlay(new BMap.Marker(point));\n\n          this.renderOverlays(value);\n        }\n      }, label);\n      this.map.addEventListener('movestart', () => {\n        if (this.state.isShowList) {\n          this.setState({\n            isShowList: false\n          });\n        }\n      });\n    };\n\n    this.renderHouseList = () => {\n      return React.createElement(\"div\", {\n        className: [styles.houseList, this.state.isShowList ? styles.show : ''].join(' '),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.titleWrap,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: styles.listTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \"\\u623F\\u5C4B\\u5217\\u8868\"), React.createElement(\"a\", {\n        className: styles.titleMore,\n        href: \"/home/house\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"\\u66F4\\u591A\\u623F\\u6E90\")), React.createElement(\"div\", {\n        className: styles.houseItems,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, this.state.list.map(item => React.createElement(HouseItem, {\n        onClick: () => this.props.history.push(`/detail/${item.houseCode}`),\n        key: item.houseCode,\n        src: BASE_URL + item.houseImg,\n        title: item.title,\n        desc: item.desc,\n        tags: item.tags,\n        price: item.price,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }))));\n    };\n  }\n\n  componentDidMount() {\n    this.initMap();\n  } // 提供地图缩放级别和覆盖物类型\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: styles.map,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(_NavBar, {\n      mode: \"light\",\n      icon: React.createElement(_Icon, {\n        type: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }),\n      onLeftClick: () => {\n        this.props.history.goBack();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"\\u5730\\u56FE\"), React.createElement(\"div\", {\n      id: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), this.renderHouseList());\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["F:/百度云下载/React/hkzf/haokezufang/src/pages/Map/index.js"],"names":["React","Component","styles","getCurrCity","getMapHouses","getHouseByFilters","HouseItem","BASE_URL","Map","state","list","isShowList","getTypeAndZoom","type","nextLevel","currZoom","map","getZoom","createOverlays","item","coord","longitude","latitude","label","areaName","count","value","ipoint","BMap","Point","createRect","createCircle","opts","position","offset","Size","Label","setContent","rect","housename","housenum","arrow","setStyle","border","addEventListener","e","console","log","moveToArea","handlerHouseList","addOverlay","clientX","clientY","changedTouches","window","innerWidth","innerHeight","x","y","panBy","status","data","setState","bubble","bubbleName","centerAndZoom","renderOverlays","setTimeout","clearOverlays","id","forEach","initMap","myGeo","Geocoder","getPoint","point","addControl","NavigationControl","ScaleControl","renderHouseList","houseList","show","join","titleWrap","listTitle","titleMore","houseItems","props","history","push","houseCode","houseImg","title","desc","tags","price","componentDidMount","render","goBack"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { NavBar, Icon, Toast } from 'antd-mobile';\n\nimport styles from './index.module.css'\nimport { getCurrCity } from '../../utils';\nimport { getMapHouses } from '../../utils/api/city';\nimport { getHouseByFilters } from '../../utils/api/house';\nimport HouseItem from '../../components/HouseItem';\nimport { BASE_URL } from '../../utils/axios';\n\nclass Map extends Component {\n\n  state = {\n    list: [],\n    isShowList: false\n  }\n\n  componentDidMount() {\n    this.initMap()\n  }\n\n  // 提供地图缩放级别和覆盖物类型\n  getTypeAndZoom = () => {\n    let type, nextLevel\n    // 获取小区缩放级别\n\n    const currZoom = this.map.getZoom() // 项目中默认缩放级别为：11\n    if (currZoom >= 10 && currZoom < 12) {\n      // 区\n      type = 'circle'\n      nextLevel = 13\n    } else if (currZoom >= 12 && currZoom < 14) {\n      // 镇\n      type = 'circle'\n      nextLevel = 15\n    } else if (currZoom >= 14 && currZoom < 16) {\n      // 小区\n      type = 'rect'\n    }\n    return {\n      type,\n      nextLevel\n    }\n  }\n\n\n  // 创建覆盖物\n  createOverlays = (type, item, nextLevel) => {\n    const {\n      coord: { longitude, latitude },\n      label: areaName,\n      count,\n      value\n    } = item;\n    // 转换地理位置坐标\n    const ipoint = new this.BMap.Point(longitude, latitude);\n    if (type === 'rect') {\n      this.createRect(ipoint, areaName, count, value)\n    } else {\n      this.createCircle(ipoint, areaName, count, value, nextLevel)\n    }\n  }\n\n  // 处理小区情况\n  createRect = (ipoint, areaName, count, value) => {\n    // 绘制覆盖物\n    const opts = {\n      position: ipoint,    // 指定文本标注所在的地理位置\n      offset: new this.BMap.Size(-50, -28)    //设置文本偏移量\n    }\n    const label = new this.BMap.Label(null, opts);  // 创建文本标注对象\n    label.setContent(`\n      <div class=\"${styles.rect}\">\n        <span class=\"${styles.housename}\">${areaName}</span>\n        <span class=\"${styles.housenum}\">${count}</span>\n        <i class=\"${styles.arrow}\"></i>\n      </div>\n     `\n    )\n    // 去除默认样式\n    label.setStyle({\n      border: 'none'\n    });\n    // 添加点击事件\n    label.addEventListener('click', (e) => {\n      console.log('点击小区', value);\n      // this.map.centerAndZoom(ipoint, 15)\n      // this.map.panTo(ipoint)\n      console.log(e);\n      this.moveToArea(e);\n      this.handlerHouseList(value)\n    })\n    this.map.addOverlay(label);\n  }\n\n  // 移动地图到当前小区位置\n  moveToArea = (e) => {\n    let { clientX, clientY } = e.changedTouches[0];\n    console.log(window.innerWidth / 2, (window.innerHeight - 330) / 2, clientX, clientY)\n    const x = window.innerWidth / 2 - clientX, y = (window.innerHeight - 330) / 2 - clientY;\n    console.log(x, y)\n    this.map.panBy(x, y)\n  }\n\n  // 获取小区下的房源列表\n  // 调用之前定义的根据过滤条件获取房源列表方法，传入cityId\n  handlerHouseList = async (value) => {\n    const { status, data: { list } } = await getHouseByFilters(value);\n    status === 200 && this.setState({\n      list,\n      isShowList: true\n    })\n  }\n\n  // 处理区和镇的情况\n  createCircle = (ipoint, areaName, count, value, nextLevel) => {\n    // 绘制覆盖物\n    const opts = {\n      position: ipoint,    // 指定文本标注所在的地理位置\n      offset: new this.BMap.Size(0, 0)    //设置文本偏移量\n    }\n    const label = new this.BMap.Label(null, opts);  // 创建文本标注对象\n    // 给label添加唯一ID\n    // label.id = value;\n    label.setContent(\n      `\n              <div class=\"${styles.bubble}\">\n              <p class=\"${styles.bubbleName}\">${areaName}</p>\n              <p>${count}</p>\n              </div>\n              `\n    )\n    // 去除默认样式\n    label.setStyle({\n      border: 'none'\n    });\n    // 添加点击事件\n    label.addEventListener('click', () => {\n      // 设置显示下一区域的位置和缩放级别\n      this.map.centerAndZoom(ipoint, nextLevel);\n      this.renderOverlays(value);\n      // 清除第一层覆盖物\n      // map.clearOverlays();\n      setTimeout(() => this.map.clearOverlays());\n    })\n    this.map.addOverlay(label);\n  }\n\n\n  // 根据区域渲染覆盖物\n  renderOverlays = async (id) => {\n    // Toast.loading('加载中...', 0);\n    // 初始化区覆盖物\n    let { status, data } = await getMapHouses(id);\n    // Toast.hide();\n    // =========获取覆盖物类型和下一层缩放级别========\n    const { type, nextLevel } = this.getTypeAndZoom();\n    if (status === 200) {\n      data.forEach((item) => {\n        this.createOverlays(type, item, nextLevel)\n      })\n    }\n  }\n\n  // 初始化地图\n  initMap = async () => {\n    // 挂载到实例上\n    this.BMap = window.BMap;\n    // 创建地图实例 \n    this.map = new this.BMap.Map(\"container\");\n    // 获取定位城市\n    const { value, label } = await getCurrCity();\n    // 创建地址解析器实例     \n    let myGeo = new this.BMap.Geocoder();\n    // 将地址解析结果显示在地图上，并调整地图视野    \n    myGeo.getPoint(null, async (point) => {\n      if (point) {\n        // 初始化地图，设置中心点坐标和地图级别  \n        this.map.centerAndZoom(point, 11);\n        // 添加控件\n        this.map.addControl(new this.BMap.NavigationControl());\n        this.map.addControl(new this.BMap.ScaleControl());\n        // map.addOverlay(new BMap.Marker(point));\n        this.renderOverlays(value)\n      }\n    },\n      label);\n    this.map.addEventListener('movestart', () => {\n      if (this.state.isShowList) {\n        this.setState({\n          isShowList: false\n        })\n      }\n    })\n  }\n\n  // 渲染小区下房屋列表\n  renderHouseList = () => {\n    return (\n      <div\n        className={[\n          styles.houseList,\n          this.state.isShowList ? styles.show : ''\n        ].join(' ')}\n      >\n        <div className={styles.titleWrap}>\n          <h1 className={styles.listTitle}>房屋列表</h1>\n          <a className={styles.titleMore} href=\"/home/house\">\n            更多房源\n    </a>\n        </div>\n\n        <div className={styles.houseItems}>\n          {/* 房屋结构 */}\n          {\n            this.state.list.map(item => (\n              <HouseItem\n                onClick={() => this.props.history.push(`/detail/${item.houseCode}`)}\n                key={item.houseCode}\n                src={BASE_URL + item.houseImg}\n                title={item.title}\n                desc={item.desc}\n                tags={item.tags}\n                price={item.price}\n              />\n            ))\n          }\n        </div>\n      </div>\n    )\n  }\n  render() {\n    return (\n      <div className={styles.map}>\n        <NavBar\n          mode=\"light\"\n          icon={<Icon type=\"left\" />}\n          onLeftClick={() => {\n            this.props.history.goBack()\n          }}\n        >\n          地图\n</NavBar>\n        <div id=\"container\"></div>\n        {/* 房源列表 */}\n        {\n          this.renderHouseList()\n        }\n      </div>\n    );\n  }\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}